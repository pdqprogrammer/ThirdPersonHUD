//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/DebuggingInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebuggingInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebuggingInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebuggingInput"",
    ""maps"": [
        {
            ""name"": ""Debug"",
            ""id"": ""9cc950b4-b9f3-42e0-81b5-dd5abc051520"",
            ""actions"": [
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""88726a60-166c-49ce-8ee7-6c522598fc51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hurt"",
                    ""type"": ""Button"",
                    ""id"": ""4188e38a-7cd2-405d-8013-7e11646ddc60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability 01"",
                    ""type"": ""Button"",
                    ""id"": ""d859a599-c444-4f98-96a9-1ce6f2e3eb89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability 02"",
                    ""type"": ""Button"",
                    ""id"": ""d095108a-ca98-495a-8c59-0216e6788f87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""c99cc28f-cf9c-4fe1-9224-c5d3ed941e7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ac4d129-934f-4562-af43-6ff50a8829f1"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2275d993-4e8c-425c-978a-2c28324c0899"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hurt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3448caf9-308f-4f42-918f-208fc0dd33cd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability 01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3d13701-f5d6-498e-a939-e7488e1c4134"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability 02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b2f25cb-2c35-4130-b0ff-71fec4177e9d"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_Heal = m_Debug.FindAction("Heal", throwIfNotFound: true);
        m_Debug_Hurt = m_Debug.FindAction("Hurt", throwIfNotFound: true);
        m_Debug_Ability01 = m_Debug.FindAction("Ability 01", throwIfNotFound: true);
        m_Debug_Ability02 = m_Debug.FindAction("Ability 02", throwIfNotFound: true);
        m_Debug_Aim = m_Debug.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_Heal;
    private readonly InputAction m_Debug_Hurt;
    private readonly InputAction m_Debug_Ability01;
    private readonly InputAction m_Debug_Ability02;
    private readonly InputAction m_Debug_Aim;
    public struct DebugActions
    {
        private @DebuggingInput m_Wrapper;
        public DebugActions(@DebuggingInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Heal => m_Wrapper.m_Debug_Heal;
        public InputAction @Hurt => m_Wrapper.m_Debug_Hurt;
        public InputAction @Ability01 => m_Wrapper.m_Debug_Ability01;
        public InputAction @Ability02 => m_Wrapper.m_Debug_Ability02;
        public InputAction @Aim => m_Wrapper.m_Debug_Aim;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @Heal.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnHeal;
                @Heal.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnHeal;
                @Heal.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnHeal;
                @Hurt.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnHurt;
                @Hurt.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnHurt;
                @Hurt.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnHurt;
                @Ability01.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnAbility01;
                @Ability01.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnAbility01;
                @Ability01.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnAbility01;
                @Ability02.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnAbility02;
                @Ability02.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnAbility02;
                @Ability02.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnAbility02;
                @Aim.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Heal.started += instance.OnHeal;
                @Heal.performed += instance.OnHeal;
                @Heal.canceled += instance.OnHeal;
                @Hurt.started += instance.OnHurt;
                @Hurt.performed += instance.OnHurt;
                @Hurt.canceled += instance.OnHurt;
                @Ability01.started += instance.OnAbility01;
                @Ability01.performed += instance.OnAbility01;
                @Ability01.canceled += instance.OnAbility01;
                @Ability02.started += instance.OnAbility02;
                @Ability02.performed += instance.OnAbility02;
                @Ability02.canceled += instance.OnAbility02;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IDebugActions
    {
        void OnHeal(InputAction.CallbackContext context);
        void OnHurt(InputAction.CallbackContext context);
        void OnAbility01(InputAction.CallbackContext context);
        void OnAbility02(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
